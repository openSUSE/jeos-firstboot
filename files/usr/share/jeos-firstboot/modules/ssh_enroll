# SPDX-License-Identifier: MIT
# SPDX-FileCopyrightText: Copyright 2024 SUSE LLC
# shellcheck shell=bash

ssh_enroll_handle_pubkeys()
{
	filename="$1"
	if ! [ -s "$filename" ]; then
		d_styled --msgbox $"No public keys received!" 0 0
		return 0
	fi

	items=()
	lineno=1
	while read -r type key comment; do
		items+=("$lineno" "${type} ${key:0:8}...${key: -20:20}" "off")
		lineno=$((lineno+1))
	done <"$filename"

	text="$(printf $"Received %d public keys from %s. Select the key(s) to import." "$(wc -l <"$filename")" "$(awk '{print $3; exit}' "$filename")")"
	if ! d_with_result --title $"SSH Key Enrollment" --separate-output --no-tags --checklist "$text" 12 60 10 "${items[@]}"; then
		return 0
	fi

	readarray -t input <<<"$result"
	# readarray converts an empty string to ("")
	if [ -z "${input[0]}" ]; then
		return 0
	fi

	(umask 077; mkdir -p ~/.ssh)
	for lineno in "${input[@]}"; do
		awk "NR==${lineno}" <"$filename" >> ~/.ssh/authorized_keys
	done

	text="$(printf $"Imported %d keys" "${#input[@]}")"
	d_styled --title $"SSH Key Enrollment" --msgbox "$text" 0 0
}

ssh_enroll_do_config()
{
	if ! d_styled --title $"SSH Key Enrollment" --yesno $"Do you want to enroll keys for SSH access?" 0 0; then
		return 0
	fi

	# Stop sshd.service temporarily if needed
	start_sshd_again=0
	if systemctl -q is-active sshd.service; then
		systemctl stop sshd.service
		start_sshd_again=1
	fi

	# Make sure host keys exist
	sshd-gen-keys-start &>/dev/null

	tmpdir="$(mktemp -d)"

	# Start the server in the background and show a dialog with information while it's running
	# and offer the option to cancel the process. Unfortunately bash doesn't have a way to wait for
	# one of multiple processes to exit and get information about which process exited and how.
	# To work around that, use subprocesses with FIFOs: One to signal once they're up and can handle
	# SIGTERM properly and one to signal that it exited and how.
	# See also the welcome-screen implementation.
	mkfifo "${tmpdir}/serverfifo"
	mkfifo "${tmpdir}/dialogfifo"
	mkfifo "${tmpdir}/exitfifo"

	(
		ssh-pairing-server >"${tmpdir}/pubkeys" 2>"${tmpdir}/serverror" &
		pid=$!; trap 'kill $pid' SIGTERM; echo server >"${tmpdir}/serverfifo"; wait $pid; echo server $? >>"${tmpdir}/exitfifo"
	) &
	serverpid=$!

	{
		echo $"Please connect to one of the addresses with ssh:"
		hostname -I
		echo
		echo $"Please verify that the host key matches:"
		for i in /etc/ssh/ssh_host_*key.pub; do ssh-keygen -l -f "$i"; done | awk '{ print $2" "$4 }'
		echo

		echo $"Randomart for ssh -o \"VisualHostKey yes\":"
		# Display the randomart for all key types next to each other
                allartlines=()
                for i in /etc/ssh/ssh_host_*key.pub; do
                        readarray -t artlines < <(ssh-keygen -l -v -f "$i" | tail -n+2)
                        for (( j=0; j < "${#artlines[@]}"; j++ )); do
                                allartlines[$j]="${allartlines[$j]}${artlines[$j]} "
                        done
                done
                ( IFS=$'\n'; echo -n "${allartlines[*]}" )
	} >"${tmpdir}/msg"

	(
		# Have to use dialog directly here, no subprocesses allowed
		dialog --backtitle "$PRETTY_NAME" --title $"SSH Key Enrollment" --exit-label $"Cancel" --textbox "${tmpdir}/msg" 0 0 &
		pid=$!; trap 'kill $pid' SIGTERM; echo dialog >"${tmpdir}/dialogfifo"; wait $pid; echo dialog $? >>"${tmpdir}/exitfifo"
	) &
	dialogpid=$!

	# Wait for both processes to be ready
	read -r <"${tmpdir}/serverfifo"
	read -r <"${tmpdir}/dialogfifo"

	# Wait for either the server or dialog to exit
	read -r who exitcode <"${tmpdir}/exitfifo"
	if [ "$who" = "server" ]; then
		kill "$dialogpid" # Server exited, kill the dialog
	else
		kill "$serverpid" # Dialog exited, kill the server
	fi
	# Wait for the other process to exit
	read -r <"${tmpdir}/exitfifo"
	wait "$serverpid" "$dialogpid"

	if [ "$start_sshd_again" != "0" ]; then
		systemctl start sshd.service
	fi

	if [ "$who" = "server" ] && [ "$exitcode" -eq 0 ]; then
		ssh_enroll_handle_pubkeys "${tmpdir}/pubkeys"
	elif [ "$who" = "server" ]; then
		d_styled --title $"SSH Key Enrollment" --msgbox $"ssh-pairing-server exited with ${exitcode}" 0 0
	else
		d_styled --title $"SSH Key Enrollment" --msgbox $"Key enrollment cancelled by user request" 0 0
	fi

	rm -r "$tmpdir"

	return 0
}

# Only show the configuration if the package is installed
if command -v ssh-pairing-server >/dev/null; then
	ssh_enroll_jeos_config()
	{
		ssh_enroll_do_config
	}

	ssh_enroll_systemd_firstboot()
	{
		ssh_enroll_do_config
	}
fi
